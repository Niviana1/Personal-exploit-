-- Function to load a script from a given URL
local function loadScript(scriptUrl)
    local success, scriptCode = pcall(game.HttpGet, game, scriptUrl)
    if success then
        local scriptFunction = loadstring(scriptCode)
        if scriptFunction then
            scriptFunction()
        else
            warn("Failed to load script from URL:", scriptUrl)
        end
    else
        warn("Failed to fetch script from URL:", scriptUrl)
    end
end

-- Get references to player, GuiService, and UserInputService
local player = game.Players.LocalPlayer
local guiService = game:GetService("GuiService")
local userInputService = game:GetService("UserInputService")

-- Create a ScreenGui for the hub
local hubGui = Instance.new("ScreenGui")
hubGui.Parent = player.PlayerGui

-- Create a draggable frame for the hub
local draggableFrame = Instance.new("Frame")
draggableFrame.Parent = hubGui
draggableFrame.Size = UDim2.new(0, 200, 0, 260)
draggableFrame.Position = UDim2.new(0, 10, 0, 10)
draggableFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
draggableFrame.BorderSizePixel = 2
draggableFrame.BorderColor3 = Color3.fromRGB(25, 25, 25)

-- Create buttons with the updated style
local buttons = {
    {Text = "Aim Bot", ScriptUrl = 'https://raw.githubusercontent.com/PABLOSleuth2/Scripts1/main/RobloxScripts/TEST/aimbot_v2.lua'},
    {Text = "Hitbox", ScriptUrl = "https://raw.githubusercontent.com/Vcsk/RobloxScripts/main/HitboxExpander.lua"},
    {Text = "Death Zone", ScriptUrl = 'https://soggyhubv2.vercel.app/Roblox/DeathZone.lua'}
}

local buttonStyle = {
    BackgroundColor3 = Color3.fromRGB(70, 120, 200),
    BorderSizePixel = 0,
    TextColor3 = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.SourceSansSemibold,
    TextScaled = true
}

local buttonSpacing = 50 -- Adjusted button spacing
local buttonHeight = 40

for index, buttonInfo in ipairs(buttons) do
    local button = Instance.new("TextButton")
    button.Parent = draggableFrame
    button.Size = UDim2.new(0, 170, 0, buttonHeight)
    button.Position = UDim2.new(0, 15, 0, buttonSpacing * index + (buttonHeight * (index - 1)))

    button.Text = buttonInfo.Text
    for property, value in pairs(buttonStyle) do
        button[property] = value
    end

    button.MouseButton1Click:Connect(function()
        loadScript(buttonInfo.ScriptUrl)
    end)
end

-- Create a minimize button for the hub
local minimizeButton = Instance.new("TextButton")
minimizeButton.Parent = draggableFrame
minimizeButton.Size = UDim2.new(0, 20, 0, 20)
minimizeButton.Position = UDim2.new(1, -50, 0, 5)
minimizeButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
minimizeButton.BorderSizePixel = 0
minimizeButton.Text = "_"
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.TextScaled = true

local ballMorphed = false

minimizeButton.MouseButton1Click:Connect(function()
    if not ballMorphed then
        -- Morph into a green ball with a square in it
        draggableFrame:TweenSizeAndPosition(UDim2.new(0, 40, 0, 40), UDim2.new(1, -50, 0, 5), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
        ballMorphed = true
        -- Hide the load script button when minimized
        for _, button in ipairs(draggableFrame:GetChildren()) do
            if button:IsA("TextButton") then
                button.Visible = false
            end
        end
    else
        -- Morph back into the draggable frame
        draggableFrame:TweenSizeAndPosition(UDim2.new(0, 200, 0, 260), UDim2.new(0, 10, 0, 10), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
        ballMorphed = false
        -- Show the load script button when restored
        for _, button in ipairs(draggableFrame:GetChildren()) do
            if button:IsA("TextButton") then
                button.Visible = true
            end
        end
    end
end)

minimizeButton.MouseButton2Click:Connect(function()
    -- Double-clicking the ball morphs it back into the draggable frame
    draggableFrame:TweenSizeAndPosition(UDim2.new(0, 200, 0, 260), UDim2.new(0, 10, 0, 10), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
    ballMorphed = false
    -- Show the load script button when restored
    for _, button in ipairs(draggableFrame:GetChildren()) do
        if button:IsA("TextButton") then
            button.Visible = true
        end
    end
end)

-- Variables for handling drag input
local touchStarted, dragStart, startPos

-- Handle touch input for drag
draggableFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStarted = true
        dragStart = input.Position
        startPos = draggableFrame.Position
    end
end)

-- Update frame position during touch drag
userInputService.InputChanged:Connect(function(input)
    if touchStarted and input.UserInputType == Enum.UserInputType.Touch then
        local delta = input.Position - dragStart
        local newX = math.clamp(startPos.X.Offset + delta.X, 0, game:GetService("GuiService").GetScreenSize().X - draggableFrame.Size.X.Offset)
        local newY = math.clamp(startPos.Y.Offset + delta.Y, 0, game:GetService("GuiService").GetScreenSize().Y - draggableFrame.Size.Y.Offset)
        draggableFrame.Position = UDim2.new(startPos.X.Scale, newX, startPos.Y.Scale, newY)
    end
end)

-- Reset touchStarted flag on touch input end
userInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStarted = false
    end
end)
